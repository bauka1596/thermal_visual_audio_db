class @com.github {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.oauth2(client_id=$undefined, client_secret=$undefined);

  monitorable list query get_issue(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"],
                                   out user: Entity(tt:username) #_[prompt="What user are you interested in?"],
                                   out number: Number,
                                   out title: String,
                                   out body: String,
                                   out time: Date)
  #_[canonical="issues on github"]
  #_[confirmation="opened issues of repository $repo_name on Github"]
  #_[confirmation_remote="opened issues of repository $repo_name on $__person's Github"]
  #_[formatted=[{type="text",text="Issue @${number} opened in ${repo_name} by @${user}"}, {type="text",text="${title}"}, {type="text",text="${body}"}]]
  #[poll_interval=60000ms]
  #[doc="issues on a particular repository"];

  monitorable list query get_commit(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"],
                                    out user: Entity(tt:username) #_[prompt="What user are you interested in?"],
                                    out message: String,
                                    out time: Date,
                                    out modified_files: Array(Entity(tt:path_name)),
                                    out added_files: Array(Entity(tt:path_name)),
                                    out deleted_files: Array(Entity(tt:path_name)))
  #_[canonical="commits on github"]
  #_[confirmation="commits of repository $repo_name on Github"]
  #_[confirmation_remote="commits of repository $repo_name on $__person's Github"]
  #_[formatted=[{type="text",text="\"${message}\" by @${user}"}]]
  #[poll_interval=60000ms]
  #[doc="commits to a particular repository"];

  monitorable list query get_milestone(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"],
                                       out user: Entity(tt:username) #_[prompt="What user are you interested in?"],
                                       out description: String,
                                       out time: Date,
                                       out title: String)
  #_[canonical="milestones on github"]
  #_[confirmation="the milestones created on Github repository $repo_name"]
  #_[confirmation_remote="the milestones created on $__person's Github repository"]
  #_[formatted=[{type="text",text="Milestone created in ${repo_name} by ${user}: "}, {type="text",text="$title"}, {type="text",text="${description}"}]]
  #[poll_interval=3600000ms]
  #[doc="milestones from a particular repository"];

  monitorable list query get_issue_comment(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"],
                                           out user: Entity(tt:username) #_[prompt="What user are you interested in?"],
                                           out issue_number: Number #_[prompt="What issue number to want to watch?"],
                                           out body: String,
                                           out time: Date)
  #_[canonical="get issue comments on github"]
  #_[confirmation="comments on issues on Github repository $repo_name"]
  #_[confirmation_remote="comments on issues on $__person's Github repository $repo_name "]
  #_[formatted=[{type="text",text="@${user} commented on issue ${issue_number} in ${repo_name}"}, {type="text",text="${body}"}]]
  #[poll_interval=3600000ms]
  #[doc="comments on issues"];

  monitorable list query get_pull_requests(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to wath?"],
                                           out title: String,
                                           out body: String,
                                           out time: Date,
                                           out reviewers: Array(Entity(tt:username)),
                                           out url: Entity(tt:url))
  #_[canonical="pull requests on github"]
  #_[confirmation="pull requests in Github repository ${repo_name}"]
  #_[confirmation_remote="pull requests in $__person's Github repository ${repo_name}"]
  #_[formatted=[{type="rdl",webCallback="${url}",displayTitle="PR: ${title}",displayText="${body}\nCreated at: ${time}\nRequested reviewers: ${reviewers}"}]]
  #[poll_interval=3600000ms]
  #[doc="pr"];

  query get_file(in req repo_name: Entity(tt:path_name) #_[prompt="What repository is the file in?"],
                 in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to get?"],
                 out url: Entity(tt:url))
  #_[canonical="link of file in github"]
  #_[confirmation="link of ${file_name} in Github repository ${repo_name}"]
  #_[confirmation_remote="link of ${file_name} in $__person's Github repository ${repo_name}"]
  #_[formatted=[{type="text",text="Here is the link:"}, {type="rdl",webCallback="${url}",displayTitle="${url}"}]]
  #[doc="generate a temporary link for the given file"];

  action add_email(in req email: Entity(tt:email_address) #_[prompt="What email do you want to add?"])
  #_[canonical="add email on github"]
  #_[confirmation="add $email to your Github account"]
  #_[confirmation_remote="add $email to $__person's Github account"]
  #[doc="Add a new email to account"];

  action comment_issue(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to comment on?"],
                       in req issue_number: Number #_[prompt="What issue do you want to comment on?"],
                       in req body: String #_[prompt="What do you want to comment?"])
  #_[canonical="comment on issue on github"]
  #_[confirmation="comment on issue $issue_number in $repo_name on Github"]
  #_[confirmation_remote="comment on issue $issue_number in $repo_name on $__person's Github"]
  #[doc="post a new comment on a given issue"];
}
