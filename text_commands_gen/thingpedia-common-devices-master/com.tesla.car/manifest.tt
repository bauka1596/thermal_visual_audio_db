class @com.tesla.car {
  import loader from @org.thingpedia.embedded();
  import config from @org.thingpedia.config.builtin();

  monitorable query get_vehicle_state(out odometer: Number,
                                      out locked: Boolean)
  #_[canonical="get state on Tesla"]
  #_[confirmation="your Tesla car state"]
  #_[confirmation_remote="$__person's Tesla state"]
  #[poll_interval=86400000ms]
  #[doc="get your Tesla car state"];

  monitorable query get_mobile_enabled(out mobile_enabled: Boolean)
  #_[canonical="is your Tesla car remotely accessible"]
  #_[confirmation="remote accessibility of your Tesla "]
  #_[confirmation_remote="$__person's car remote accessibility"]
  #_[formatted=[{type="text",text="The remote accessibility is ${mobile_enabled}"}]]
  #[poll_interval=86400000ms]
  #[doc="is your Tesla accessible remotely"];

  monitorable query get_charge_state(out charging_state: String,
                                     out battery_level: Number,
                                     out charge_port_door_open: Boolean,
                                     out charge_port_latch: String)
  #_[canonical="get the charge state of the Tesla car"]
  #_[confirmation="the charge state of your Tesla car"]
  #_[confirmation_remote="$__person's charge state"]
  #_[formatted=[{type="text",text="The charging state is ${charging_state}"}, {type="text",text="The battery level is ${battery_level}%"}, {type="text",text="The charge port door open is ${charge_port_door_open}"}, {type="text",text="The charge port latch is ${charge_port_latch}"}]]
  #[poll_interval=86400000ms]
  #[doc="get the charge state of your Tesla car"];

  monitorable query get_climate_state(out inside_temperature: Measure(C),
                                      out temperature_setting: Measure(C),
                                      out conditioner_on: Boolean)
  #_[canonical="get the climate state of the Tesla car"]
  #_[confirmation="the climate state of your Tesla car"]
  #_[confirmation_remote="$__person's car's climate state"]
  #_[formatted=[{type="text",text="The temperature is ${inside_temperature} C"}, {type="text",text="The temperature is set to ${temperature_setting} C"}, {type="text",text="The air conditioner is ${conditioner_on}"}]]
  #[poll_interval=86400000ms]
  #[doc="get the climate state of your Tesla car"];

  monitorable query get_drive_state(out location: Location)
  #_[canonical="get the location of the Tesla car"]
  #_[confirmation="the location of your Tesla car"]
  #_[confirmation_remote="$__person's car's location"]
  #_[formatted=[{type="text",text="The location is ${location}"}]]
  #[poll_interval=86400000ms]
  #[doc="get the location of your Tesla car"];

  action flash()
  #_[canonical="flash your tesla car"]
  #_[confirmation="flash your Tesla car"]
  #_[confirmation_remote="flash $__person's Tesla car"]
  #[doc="flash the Tesla car"];

  action honk_horn()
  #_[canonical="honk your Tesla car"]
  #_[confirmation="honk the horn on your Tesla car"]
  #_[confirmation_remote="honk $__person's Tesla car"]
  #[doc="honk the horn on the Tesla car"];

  action wake_up()
  #_[canonical="wake up your Tesla car"]
  #_[confirmation="wake up your Tesla car"]
  #_[confirmation_remote="wake up $__person's Tesla car"]
  #[doc="wake up the Tesla car"];

  action set_air_conditioning(in req power: Enum(on,off) #_[prompt="Do you want to turn the air-conditioner on your Tesla car on or off?"])
  #_[canonical="set power on the Tesla air-conditioner"]
  #_[confirmation="turn $power your Tesla air-conditioner"]
  #_[confirmation_remote="turn $power $__person's Tesla's air conditioner"]
  #[doc="change the power status of your air-conditioner on the Tesla car"];

  action set_temperature(in req value: Measure(C) #_[prompt="What temperature do you want to set?"])
  #_[canonical="set target temperature of the Tesla car"]
  #_[confirmation="set the temperature of your Tesla car to $value"]
  #_[confirmation_remote="set the temperature of $__person's Tesla car to $value"]
  #[doc="set target temperature"];
}

